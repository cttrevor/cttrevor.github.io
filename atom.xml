<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trevor</title>
  <icon>https://www.gravatar.com/avatar/2a0b4946c9bb4b2d89e59c5aa8263ade</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cttrevor.github.io/"/>
  <updated>2018-02-24T14:34:23.000Z</updated>
  <id>https://cttrevor.github.io/</id>
  
  <author>
    <name>Trevor Cui</name>
    <email>ct1993@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>this相关</title>
    <link href="https://cttrevor.github.io/2018/02/24/js-this/"/>
    <id>https://cttrevor.github.io/2018/02/24/js-this/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-02-24T14:34:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考自：<a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（10）——this（王福朋 - 博客园）</a>。如有侵权，请联系删除。</p><p>在具体了解 this 之前，先强调一个非常重要的知识点：在函数中 this 到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。因为 ==this 的取值是执行上下文环境的一部分==，每次调用函数，都会产生一个新的执行上下文环境。</p><p>this的取值，分四种情况。我们来挨个看一下。</p><h2 id="情况1：构造函数"><a href="#情况1：构造函数" class="headerlink" title="情况1：构造函数"></a>情况1：构造函数</h2><p>所谓构造函数就是用来 new 对象的函数。其实严格来说，所有的函数都可以 new 一个对象，但是有些函数的定义是为了 new 一个对象，而有些函数则不是。另外注意，构造函数的函数名第一个字母大写（规则约定）。例如：Object、Array、Function 等。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"aa"</span>;</span><br><span class="line">  <span class="keyword">this</span>.year = <span class="number">2018</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// Foo &#123;name: "aa", yaer: 2018&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f1.name);  <span class="comment">// aa</span></span><br><span class="line"><span class="built_in">console</span>.log(f1.year);  <span class="comment">// 2018</span></span><br></pre></td></tr></table></figure><p>以上代码中，如果函数作为构造函数用，那么其中的 this 就代表它即将 new 出来的对象。</p><p>==以下有两个需要注意的地方==：</p><p>1、情况1 仅限 Foo 函数作为构造函数的情况。==如果直接调用 Foo 函数==，而不是 new Foo()，情况就大不一样了(this 指向 Window)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"aa"</span>;</span><br><span class="line">  <span class="keyword">this</span>.year = <span class="number">2018</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, ...</span></span><br><span class="line">&#125;</span><br><span class="line">Foo();</span><br></pre></td></tr></table></figure><p>2、在构造函数的 prototype 中，this 指向的是构造的对象：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"aa"</span>;</span><br><span class="line">  <span class="keyword">this</span>.year = <span class="number">2018</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</span><br><span class="line">f1.getName();    <span class="comment">// aa</span></span><br></pre></td></tr></table></figure><p>其实，==不仅仅是构造函数的 prototype，即便是在整个原型链中，this 代表的也都是当前对象的值==。</p><h2 id="情况2：函数作为对象的一个属性"><a href="#情况2：函数作为对象的一个属性" class="headerlink" title="情况2：函数作为对象的一个属性"></a>情况2：函数作为对象的一个属性</h2><p>如果函数作为对象的一个属性时，并且作为对象的一个属性被调用时，函数中的 this 指向该对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// &#123;x: 10, fn: f&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);  <span class="comment">// 10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.fn();</span><br></pre></td></tr></table></figure><p>以上代码中，fn 不仅作为一个对象的一个属性，而且的确是作为对象的一个属性被调用。结果 this 就是 obj 对象。</p><p>==注意，如果fn函数不作为obj的一个属性被调用==，会是什么结果呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, ...</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);  <span class="comment">// undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = obj.fn;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p>如上代码，如果 fn 函数被赋值到了另一个变量中，并没有作为 obj 的一个属性被调用，那么 this 的值就是 Window，this.x 为 undefined。</p><h2 id="情况3：函数用-call-或者-apply-调用"><a href="#情况3：函数用-call-或者-apply-调用" class="headerlink" title="情况3：函数用 call 或者 apply 调用"></a>情况3：函数用 call 或者 apply 调用</h2><p>当一个函数被 call 和 apply 调用时，this 的值就取传入的对象的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// &#123;x: 10&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);  <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call(obj);</span><br></pre></td></tr></table></figure><h2 id="情况4：全局-amp-调用普通函数"><a href="#情况4：全局-amp-调用普通函数" class="headerlink" title="情况4：全局 &amp; 调用普通函数"></a>情况4：全局 &amp; 调用普通函数</h2><p>这一部分代码都很好理解：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);           <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, ...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);         <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>需要注意的是，==如果在对象内的函数属性中调用一个函数，这个被调用的函数属于调用普通函数==，而不属于情况2 ：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, ...</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);  <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();</span><br></pre></td></tr></table></figure><h2 id="一个经典的-jQuery-源码案例"><a href="#一个经典的-jQuery-源码案例" class="headerlink" title="一个经典的 jQuery 源码案例"></a>一个经典的 jQuery 源码案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// …… 此处省略若干行 ……</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// extend jQuery itself if only one argument is passed</span></span><br><span class="line">  <span class="keyword">if</span> (i === length) &#123;</span><br><span class="line">    target = <span class="keyword">this</span>;</span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// …… 此处省略若干行 ……</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上代码是从 jQuery 中摘除来的部分代码。jQuery.extend 和 jQuery.fn.extend 都指向了同一个函数，但是当执行时，函数中的 this 是不一样的。</p><p>执行 jQuery.extend(…) 时，this 指向 jQuery；执行 jQuery.fn.extend(…) 时，this 指向 jQuery.fn。</p><p>这样就巧妙的将一段代码同时共享给两个功能使用，更加符合设计原则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考自：&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3988422.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解javascript原型和闭包（10）——this（王福朋 - 博客园
      
    
    </summary>
    
      <category term="Frontend" scheme="https://cttrevor.github.io/categories/Frontend/"/>
    
    
      <category term="JavaScript" scheme="https://cttrevor.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>变量作用域和执行上下文（上）</title>
    <link href="https://cttrevor.github.io/2018/02/22/js-scope-up/"/>
    <id>https://cttrevor.github.io/2018/02/22/js-scope-up/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-02-24T14:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考自：<a href="http://www.cnblogs.com/wangfupeng1988/p/4001284.html" target="_blank" rel="noopener">深入理解javascript原型和闭包系列（王福朋 - 博客园）</a>。如有侵权，请联系删除。</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>JavaScript 变量的作用域无非就两种：全局变量和局部变量。</p><p>每次定义一个函数，都会产生一个作用域链（scope chain）。当 JavaScript 寻找变量 varible 时（这个过程称为变量解析），总会优先在当前作用域链的第一个对象中查找属性 varible ，如果找到，则直接使用这个属性；否则，继续查找下一个对象的是否存在这个属性；这个过程会持续直至找到这个属性或者最终未找到引发错误为止。</p><p>下面继续说作用域。作用域是一个很抽象的概念，类似于一个“地盘”：</p><img src="/2018/02/22/js-scope-up/scope1.png"><p>如上图，全局代码和 fn、bar 两个函数都会形成一个作用域。而且，作用域有上下级的关系，上下级关系的确定就看函数是在哪个作用域下创建的。例如，fn 作用域下创建了 bar 函数，那么“ fn 作用域”就是“ bar 作用域”的上级。</p><p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。例如以上代码中，三个作用域下都声明了“ a ”这个变量，但是他们不会有冲突。各自的作用域下，用各自的“ a ”。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>先来看以下几段代码：</p><p>1、<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></p><p>2、<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 尽管对 a 的声明在 console 之后，console 的时候 a 是已定义的，但是不知道值为 10</span></span><br></pre></td></tr></table></figure></p><p>3、<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, ...</span></span><br></pre></td></tr></table></figure></p><p>4、<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f1);</span><br><span class="line"><span class="comment">// ƒ f1() &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;;  <span class="comment">// 函数声明</span></span><br></pre></td></tr></table></figure></p><p>5、<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f2);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;  <span class="comment">// 函数表达式</span></span><br></pre></td></tr></table></figure></p><p>由以上几段代码，可以看出 JavaScript 的一些特点：在一段 js 代码真正运行之前，浏览器已经做了一些准备工作，具体工作主要有以下三点：</p><p>1、变量、函数表达式——变量声明，默认赋值为undefined；</p><p>2、this 赋值</p><p>3、函数声明赋值</p><p>这三种数据的准备情况我们称之为“==执行上下文==”或者“==执行上下文环境==”。给执行上下文环境下一个通俗的定义——在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用 undefined 占个空。</p><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><p>再先看一段代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);  <span class="comment">// a 是自由变量</span></span><br><span class="line">&#125;                  <span class="comment">// 函数创建时，就确定了函数要取值的作用域</span></span><br><span class="line"></span><br><span class="line">a += <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  f();             <span class="comment">// 打印 “50”，既不是 “20”，也不是 “10”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a += <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">bar(fn);</span><br></pre></td></tr></table></figure><p>从这里可以看出，函数每被调用一次，==都会产生一个新的执行上下文环境==。因为不同的调用可能就会有不同的参数。另外，函数在==定义的时候（不是调用的时候）==，==就已经确定了函数体内部自由变量的作用域==。</p><p>==一定要切记的是，只有函数可以创造上下文环境，也只有函数可以创建作用域。==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考自：&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/4001284.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解javascript原型和闭包系列（王福朋 - 博客园）&lt;/a&gt;。如有
      
    
    </summary>
    
      <category term="Frontend" scheme="https://cttrevor.github.io/categories/Frontend/"/>
    
    
      <category term="JavaScript" scheme="https://cttrevor.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>STL基本操作小记</title>
    <link href="https://cttrevor.github.io/2018/02/09/stl-base/"/>
    <id>https://cttrevor.github.io/2018/02/09/stl-base/</id>
    <published>2018-02-08T16:00:00.000Z</published>
    <updated>2018-02-24T14:28:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在刷算法题时，若使用C++，有了STL的助力会使会使代码简洁易懂很多，写起来也会变得便捷。有人说用STL会弱化编程能力，其实我认为，如果只用基本的数据结构的基本操作的话，不算是在走捷径，毕竟不可能每次用到一个数据结构的时候都现造轮子，尤其是在笔试面试这样的短时间高强度的场合中。因此本文总结归纳一些算法题中常会用到的数据结构和基本操作，并尽量保证所展现的操作不超出数据结构本身的能力范围。同时，也会有一些系统自带的基础算法和一些结构等。只要算法题中我遇到的都会写在本文中。</p><h2 id="常用容器"><a href="#常用容器" class="headerlink" title="常用容器"></a>常用容器</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector相当于动态数组，平常一般用来直接作为数组使用。在LeetCode中vector现在一般也直接用作数组的输入和输出参数。</p><p>引用文件：<code>#include &lt;vector&gt;</code></p><p>初始化一个vector：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1(<span class="number">12</span>);         <span class="comment">// 12个int类型值为0的元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec2(<span class="number">12</span>, <span class="number">9</span>);      <span class="comment">// 12个int类型值为9的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若 a 是一个数组（vector、set等容器均可）</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec3(a+i, a+j)    <span class="comment">// vec3的初始值为 a 数组中 i - j 位元素（index从0开始）</span></span><br></pre></td></tr></table></figure><p>其他的一些基本操作：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在数组尾部操作</span></span><br><span class="line">vec.push_back(x);</span><br><span class="line">vec.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的迭代</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i++)</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.begin();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line"><span class="comment">// vector.insert(&lt;起始地址&gt;, &lt;插入的数量&gt;, &lt;元素值&gt;)，其中若插入数量为1，可以只传递(&lt;起始地址&gt;, &lt;元素值&gt;)</span></span><br><span class="line">vec.insert(vec.begin() + i, count, number);     <span class="comment">// i 从 0 开始，表示新插入的元素在第 i 位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="comment">// vector.erase(&lt;删除元素的地址&gt;);</span></span><br><span class="line"><span class="comment">// vector.erase(&lt;删除元素的起始地址&gt;，&lt;终止地址&gt;);</span></span><br><span class="line">vec.erase(vec.begin() + i, vec.begin() + j);    <span class="comment">//i 仍然从 0 开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空数组</span></span><br><span class="line">vec.clear();</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 在算法题中一般就是拿来当作一个不含重复值的数组来使用了。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">// set&lt;int&gt; s(a.begin(), a.end())</span></span><br><span class="line">s.insert(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set大小：s.size()</span></span><br><span class="line"><span class="comment">// set起始：s.begin()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s.find(x) != s.end()) &#123;</span><br><span class="line">    s.erase(x);</span><br><span class="line">&#125;</span><br><span class="line">s.count(x)                    <span class="comment">// 返回值为 0（未找到） 或 1（找到）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!s.empty()) &#123;</span><br><span class="line">    s.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列是非常常用的一种数据结构，特点为先进先出。若只需要普通队列的功能，头文件 <code>&lt;queue&gt;</code> 即可；若需要使用双端队列，可引入STL头文件 <code>&lt;deque&gt;</code>。</p><p>普通队列：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(x);</span><br><span class="line"><span class="keyword">if</span>(!q.empty()) &#123;</span><br><span class="line">    q.pop();             <span class="comment">// 注：弹出元素时不会返回弹出值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = q.front()        <span class="comment">// 队首：最早被压入的元素</span></span><br><span class="line"><span class="keyword">int</span> n = q.back()         <span class="comment">// 队尾：新压入的元素</span></span><br><span class="line"><span class="keyword">int</span> length = q.size()    <span class="comment">// 队列的长度</span></span><br></pre></td></tr></table></figure><p>双端队列：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq1(dq);     <span class="comment">// 把 dq 的值赋给 dq1</span></span><br><span class="line">dq1.swap(dq);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dq.push_back(x);</span><br><span class="line">dq.pop_front();</span><br><span class="line"></span><br><span class="line">dq.push_front(x);</span><br><span class="line">dq.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = dq.front();</span><br><span class="line"><span class="keyword">int</span> n = dq.back();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length = dq.size();</span><br><span class="line"><span class="keyword">bool</span> isEmpty = dq.empty();</span><br><span class="line">dq.clear();             <span class="comment">// 清空队列</span></span><br></pre></td></tr></table></figure><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>栈也是一种很常见的数据结构，特点是先进后出。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">s.push(x);</span><br><span class="line"><span class="keyword">int</span> m = s.top();</span><br><span class="line"><span class="keyword">if</span>(!s.empty()) &#123;</span><br><span class="line">    s.pop();          <span class="comment">// 一样，stack 的 pop 函数不返回栈顶的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length = s.size();</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map是STL的一个关联容器，提供一对一的数据处理能力，在算法题中，我一般拿它当作哈希表来用。实际上STL还有 <code>hash_map</code>。区别上，<code>map</code> 是用红黑树来实现的，查找复杂度为 <code>O(log(n))</code>，<code>hash_map</code> 是用哈希表实现的，查找时间复杂度为 <code>O(1)</code>，如果记录非常大，还是建议使用 <code>hash_map</code>，查找效率会高很多。使用上两者的使用方法差别不大，这里就用 <code>map</code> 来做个示范。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">mymap[i] = j;</span><br><span class="line">mymap.erase(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = mymap.size();</span><br><span class="line"><span class="keyword">if</span>(mymap.find(i) != mymap.end()) &#123;</span><br><span class="line">    <span class="comment">// todo for mymap[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mymap.clear();</span><br></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>使用STL构建一个堆主要是 <code>vector</code> 容器和几个函数相结合。在时间复杂度上面，堆插入元素的时间复杂度为 <code>O(logn)</code>，得到最小（最大）值的时间复杂度为 <code>O(1)</code>。示例代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// make_heap：对于数组[first, last)范围内进行堆排序</span></span><br><span class="line"><span class="comment">// cmpObject：比较对象，默认为最大堆less&lt;int&gt;，最小堆用greater&lt;int&gt;，后面三个函数一样</span></span><br><span class="line"><span class="comment">// make_heap(first, last)</span></span><br><span class="line"><span class="comment">// make_heap(first, last, cmpObject)</span></span><br><span class="line"><span class="comment">// push_heap：对刚插入的（尾部）元素做堆排序</span></span><br><span class="line"><span class="comment">// push_heap(first, last)</span></span><br><span class="line"><span class="comment">// pop_heap：将front（即第一个最大元素）移动到end的前部，同时将剩下的元素重新构造成(堆排序)一个新的heap</span></span><br><span class="line"><span class="comment">// pop_heap(first, last)</span></span><br><span class="line"><span class="comment">// sort_heap：将一个堆做排序,最终成为一个有序的系列（必须先得是一个堆）</span></span><br><span class="line"><span class="comment">// sort_heap(first, last)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example：剑指offer获取数组的中位数，构造最小堆和最大堆的过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (((min.size() + max.size()) &amp; <span class="number">0x1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max.size() &gt; <span class="number">0</span> &amp;&amp; num &lt; max[<span class="number">0</span>]) &#123;</span><br><span class="line">            max.push_back(num);</span><br><span class="line">            push_heap(max.begin(), max.end(), less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            num = max[<span class="number">0</span>];</span><br><span class="line">            pop_heap(max.begin(), max.end(), less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            max.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        min.push_back(num);</span><br><span class="line">        push_heap(min.begin(), min.end(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (min.size() &gt; <span class="number">0</span> &amp;&amp; num &gt; min[<span class="number">0</span>]) &#123;</span><br><span class="line">            min.push_back(num);</span><br><span class="line">            push_heap(min.begin(), min.end(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            num = min[<span class="number">0</span>];</span><br><span class="line">            pop_heap(min.begin(), min.end(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            min.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        max.push_back(num);</span><br><span class="line">        push_heap(max.begin(), max.end(), less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>C++ 的 <code>&lt;algorithm&gt;</code> 库很强大，很多算法题常用的函数都在该库中。</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort</code> 主要用于对于一个序列，有序的操作比乱序简便很多，且快排 <code>O(nlog(n))</code> 的时间复杂度对于处理该问题可以接受时。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myfunction</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> (i &lt; j); &#125;</span><br><span class="line"></span><br><span class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end());</span><br><span class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end(), myfunction);</span><br><span class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end(), [](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">    <span class="keyword">return</span> i &lt; j;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此外，还有三种排序，只做简单说明：</p><p>1、<code>stable_sort</code>：稳定排序</p><p>2、<code>partial_sort</code>：部分排序</p><p>3、<code>partial_sort_copy</code>：复制并排序</p><h3 id="最大值、最小值、replace、swap"><a href="#最大值、最小值、replace、swap" class="headerlink" title="最大值、最小值、replace、swap"></a>最大值、最小值、replace、swap</h3><p>很简单，主要为了做说明，直接上代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    // std::min_element, std::max_element</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myfn</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i&lt;j; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector(myints, myints + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(myints[<span class="number">0</span>], myints[<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(myints[<span class="number">0</span>], myints[<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *min_element(myints, myints+<span class="number">7</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *max_element(myints, myints+<span class="number">7</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using function myfn as comp:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *min_element(myints, myints+<span class="number">7</span>,myfn) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *max_element(myints, myints+<span class="number">7</span>,myfn) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    replace(myvector.begin(), myvector.end(), <span class="number">20</span>, <span class="number">90</span>)        <span class="comment">// replace all 20 to 90</span></span><br><span class="line">    </span><br><span class="line">    swap(myvector[<span class="number">0</span>], myvector[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p><code>pair</code> 是在做<a href="https://leetcode.com/problems/queue-reconstruction-by-height" target="_blank" rel="noopener">LeetCode 406题</a>时遇到的，然后对其进行了一番查找，发现其操作还是挺简便的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;                                    // pair 的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; p.first &gt;&gt; p.second) &#123;                   <span class="comment">// 使用 .first、.second 快速访问 pair 的两个元素</span></span><br><span class="line">    vec.push_back(make_pair(p.first, p.second));      <span class="comment">// 使用 make_pair 新建一个 pair</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> node : p) &#123;                                  <span class="comment">// 使用 auto : 来进行整个 vector 的迭代较简便</span></span><br><span class="line">    <span class="comment">//todo for node.first &amp; node.second</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在刷算法题时，若使用C++，有了STL的助力会使会使代码简洁易懂很多，写起来也会变得便捷。有人说用STL会弱化编程能力，其实我认为，如果只用基本的数据结构的基本操作的话，不算是在走捷径，毕竟不可能每次用到一个数据结构的时候都现造轮子，尤其是在笔试面试这样的短时间高强度的场合
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://cttrevor.github.io/categories/Algorithm/"/>
    
    
      <category term="basis" scheme="https://cttrevor.github.io/tags/basis/"/>
    
      <category term="LeetCode" scheme="https://cttrevor.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://cttrevor.github.io/2018/01/27/binary-search/"/>
    <id>https://cttrevor.github.io/2018/01/27/binary-search/</id>
    <published>2018-01-26T16:00:00.000Z</published>
    <updated>2018-01-27T08:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找问题总的来说不复杂，主要麻烦的点在于边界问题。且不同的条件下二分的写法也都不一样。接下来就做一个总结。</p><h2 id="最基础的二分查找"><a href="#最基础的二分查找" class="headerlink" title="最基础的二分查找"></a>最基础的二分查找</h2><p>先看最基础，写起来也最简单的二分查找：只需要找到相等的位置就返回。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; k) left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; k) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四个不同的边界问题"><a href="#四个不同的边界问题" class="headerlink" title="四个不同的边界问题"></a>四个不同的边界问题</h2><p>接下来的变种问题都对于单调不递减数组而言。</p><h3 id="查找最后一个等于或者小于-key-的元素"><a href="#查找最后一个等于或者小于-key-的元素" class="headerlink" title="查找最后一个等于或者小于 key 的元素"></a>查找最后一个等于或者小于 key 的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastEqualSmaller</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; k) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找最后一个小于-key-的元素"><a href="#查找最后一个小于-key-的元素" class="headerlink" title="查找最后一个小于 key 的元素"></a>查找最后一个小于 key 的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastSmaller</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt;= k) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找第一个等于或者大于-key-的元素"><a href="#查找第一个等于或者大于-key-的元素" class="headerlink" title="查找第一个等于或者大于 key 的元素"></a>查找第一个等于或者大于 key 的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">firstEqualLarger</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt;= k) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找第一个大于-key-的元素"><a href="#查找第一个大于-key-的元素" class="headerlink" title="查找第一个大于 key 的元素"></a>查找第一个大于 key 的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">firstLarger</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; k) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>二分查找变种较多，不过它们的“套路”是一样的，以上代码就是其套路，如何快速写出二分查找的代码，只需按照以下步骤即可：</p><h3 id="首先判断出是返回-left，还是返回-right"><a href="#首先判断出是返回-left，还是返回-right" class="headerlink" title="首先判断出是返回 left，还是返回 right"></a>首先判断出是返回 left，还是返回 right</h3><p>因为我们知道最后跳出 <code>while (left &lt;= right)</code> 循环条件是 <code>right &lt; left</code>，且 <code>right = left - 1</code>。最后 <code>right</code> 和 <code>left</code> 一定是卡在“边界值”的左右两边，如果是比较值为 <code>key</code>，查找小于等于（或者是小于）<code>key</code> 的元素，则边界值就是等于 <code>key</code> 的所有元素的最左边那个，其实应该返回 <code>left</code>。</p><h3 id="判断出比较符号"><a href="#判断出比较符号" class="headerlink" title="判断出比较符号"></a>判断出比较符号</h3><p>也就是 <code>if (array[mid] ? key)</code>  中的判断符号，结合步骤 1 和给出的条件，如果是查找小于等于 <code>key</code> 的元素，则知道应该使用判断符号 <code>&gt;=</code>，因为是要返回 <code>left</code>，所以如果 <code>array[mid]</code> 等于或者大于 <code>key</code>，就应该使用 <code>&gt;=</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二分查找问题总的来说不复杂，主要麻烦的点在于边界问题。且不同的条件下二分的写法也都不一样。接下来就做一个总结。&lt;/p&gt;
&lt;h2 id=&quot;最基础的二分查找&quot;&gt;&lt;a href=&quot;#最基础的二分查找&quot; class=&quot;headerlink&quot; title=&quot;最基础的二分查找&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://cttrevor.github.io/categories/Algorithm/"/>
    
    
      <category term="basis" scheme="https://cttrevor.github.io/tags/basis/"/>
    
  </entry>
  
  <entry>
    <title>子数组和的一系列问题（上）</title>
    <link href="https://cttrevor.github.io/2018/01/20/subarray-sum/"/>
    <id>https://cttrevor.github.io/2018/01/20/subarray-sum/</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-01-27T08:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Algorithm 专题将会是我刷算法题的一些总结。对于数组类型的算法题来说，有关于子数组和的一系列问题，思路都比较类似。接下来，让我们从子数组最大累加和开始吧！</p><h2 id="子数组最大累加和"><a href="#子数组最大累加和" class="headerlink" title="子数组最大累加和"></a>子数组最大累加和</h2><h3 id="题目简析"><a href="#题目简析" class="headerlink" title="题目简析"></a>题目简析</h3><p>本题来源于<a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">LeetCode 53题 Maximum Subarray</a>。</p><p>给定一个数组，数组内的数字有正有零有负，求数组内累加和最大的子数组。（无论是求和的值、求子数组长度、求子数组起始点都一样，无非是记录的值不一样罢了）</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>子数组相关的问题都可以用两个 for 循环去遍历子数组的起始位置和结束位置，那么总归会遍历到那个最大累加和的子数组，从而记录并输出出来。</p><p>显而易见，这种做法的算法复杂度是<code>O(n^2)</code>。</p><p>但是这道题有一个思路很简单，但不是很容易自然想到的解法。用一个<code>current</code>值记录当前的子数组和。一旦值小于0，则置为0。同时用一个变量记录最大的<code>current</code>值。该解法虽然不容易自然想到，但很容易想到其思路的正确性：设一个数组的最大和子数组起始坐标为<code>i</code>，那么以<code>i</code>开头的子数组中若存在和小于0的，去掉这部分，显然剩下的子数组和更大。</p><p>该做法时间复杂度<code>O(n)</code>,空间复杂度<code>O(1)</code>。</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 考虑空数组异常</span></span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这样写可以避免数组内都是负数的情况，max会保存最大的负数</span></span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">        cur += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(max &lt; cur) max = cur;</span><br><span class="line">        <span class="keyword">if</span>(cur &lt; <span class="number">0</span>) cur = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="累加和为给定值-k-的子数组"><a href="#累加和为给定值-k-的子数组" class="headerlink" title="累加和为给定值 k 的子数组"></a>累加和为给定值 k 的子数组</h2><h3 id="题目简析-1"><a href="#题目简析-1" class="headerlink" title="题目简析"></a>题目简析</h3><p>这类型有三种题，一个是来源于<a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">LeetCode 560题 Subarray Sum Equals K</a>。该题为求累加和为给定值的子数组的数量。另一种为求子数组的最大长度。</p><p>第三种相对较简单，在第二种题的基础上增加限定条件：所给数组元素均为非负数（或都是正数）。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>子数组和相关的问题如果想通过一次遍历就能得到结果，思路都可以往累加和的差上去考虑。比如<code>a[i]</code> 到 <code>a[j]</code> 的累加和，等于 <code>a[0]</code> 到 <code>a[j]</code> 的累加和减去 <code>a[0]</code> 到 <code>a[i-1]</code> 的累加和。因此，若把累加和记做一个数组，也许就能想到用空间换取时间的算法。</p><p>前两种题做法相差不大。都是利用哈希表对已计算的累加和进行存储。首先我们可以很容易想到的是，当得到当前 <code>i</code> 位置的累加和 <code>sum</code> 时，若 <code>sum - k</code> 在累加和数组之前存在，那么就存在以 <code>i</code> 结尾的累加和为 <code>k</code> 的数组。而哈希表可以把遍历累加和数组的过程变成 <code>O(1)</code> 的时间复杂度。</p><p>对于统计子数组数量来说，哈希表存放的是当前累加和出现过的次数。而对于求最长子数组来说，哈希表存放的是当前累加和最早出现的位置。</p><p>哈希表的解法时间复杂度 <code>O(n)</code>，空间复杂度 <code>O(n)</code>。</p><p>对于第三题来说，由于有了非负数（或正数）的限定条件，left、right 两指针的思路很清晰：当前和小于等于 <code>k</code>，右指针向右移动，同时加上右指针的值；若大于，则左指针向右，同时减去左指针的值。同时，记录等于 <code>k</code> 时的最长长度。该解法时间复杂度 <code>O(n)</code>，空间复杂度 <code>O(1)</code>。</p><h3 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h3><p>前两题：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 始终记得处理空数组</span></span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; sumMap;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对于初始时数组和为0的处理（很重要！）：</span></span><br><span class="line">    <span class="comment">// 第一题，先记录0出现了1次</span></span><br><span class="line">    sumMap[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 第二题，先记录0出现在-1的位置上</span></span><br><span class="line">    <span class="comment">// sumMap[0] = -1;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;     <span class="comment">// 当前数组和</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sumMap.find(sum - k) != sumMap.end())  <span class="comment">// 若 sum - k 已存在</span></span><br><span class="line">            count += sumMap[sum - k];</span><br><span class="line">            <span class="comment">// count = max(count, i - sumMap[sum - k])</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 在哈希表中记录sum</span></span><br><span class="line">        <span class="keyword">if</span>(sumMap.find(sum) == sumMap.end())</span><br><span class="line">            sumMap[sum] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// sumMap[sum] = i;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sumMap[sum]++;</span><br><span class="line">            <span class="comment">// 对于第二题，若 sum 已经出现过，不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三题：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span> || k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; nums.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == k) &#123;</span><br><span class="line">            res = max(res, right - left);</span><br><span class="line">            sum += nums[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; k) &#123;</span><br><span class="line">            sum += nums[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; k) &#123;</span><br><span class="line">            sum -= nums[left--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充题目"><a href="#补充题目" class="headerlink" title="补充题目"></a>补充题目</h3><p>1、给定一个数组，求所有子数组中正数与负数个数相等的最长子数组长度。</p><p>2、给定一个数组，其中元素只有 1 或 0。求所有子数组中 1 与 0 个数相等的最长子数组长度。</p><p>理解了前面的原题解法后，这两道补充题思路很简单，第一题把所有正数变成 1，所有负数变成 -1，即所求为新数组中和为 0 的最长子数组。第二题几位 1 不变，0 变成 -1 后的新数组中和为 0 的最长子数组。</p><h2 id="累加小于等于给定值-k-的子数组"><a href="#累加小于等于给定值-k-的子数组" class="headerlink" title="累加小于等于给定值 k 的子数组"></a>累加小于等于给定值 k 的子数组</h2><h3 id="题目简析-2"><a href="#题目简析-2" class="headerlink" title="题目简析"></a>题目简析</h3><p>给定一个数组，数组内的数字有正有零有负，求数组内累加小于等于 k 的最长子数组长度。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>该题看起来跟累加和等于 k 的题目差不多，但实际上比上一题要难不少。主要难点在于哈希表无法存储大于或等于某一个值的累加和最早出现的位置。为了在小于 <code>O(n)</code> 的时间复杂度内找到该位置，我们采用一个辅助数组来存储最大的累加和。这样一来，得到的辅助数组是有序的，故可以通过二分查找找到大于或等于某一个值的累加和最早出现的位置。思路还是比较清晰的，所以还是看代码为主吧。</p><p>该做法时间复杂度<code>O(nlogn)</code>,空间复杂度<code>O(1)</code>。</p><h3 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxLenth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxSum;</span><br><span class="line">    <span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> pre = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    maxSum.push_back(pre);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        pre = max(pre, sum);</span><br><span class="line">        maxSum.push_back(pre);</span><br><span class="line">        <span class="keyword">int</span> index = getIndex(maxSum, sum - k)</span><br><span class="line">        res = max((index == <span class="number">-1</span>) ? <span class="number">0</span> : (i - index + <span class="number">1</span>), res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt;= k) &#123;</span><br><span class="line">            res = mid;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Algorithm 专题将会是我刷算法题的一些总结。对于数组类型的算法题来说，有关于子数组和的一系列问题，思路都比较类似。接下来，让我们从子数组最大累加和开始吧！&lt;/p&gt;
&lt;h2 id=&quot;子数组最大累加和&quot;&gt;&lt;a href=&quot;#子数组最大累加和&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://cttrevor.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://cttrevor.github.io/tags/LeetCode/"/>
    
      <category term="Array" scheme="https://cttrevor.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cttrevor.github.io/2018/01/08/hello-world/"/>
    <id>https://cttrevor.github.io/2018/01/08/hello-world/</id>
    <published>2018-01-07T16:00:00.000Z</published>
    <updated>2018-01-27T08:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实一直都有想做一个博客的想法，一方面为了记录我的技术成长，另一方面来说，如果能有更多的人关注的话，也可以交流一下，共同成长。Hexo 是一个关注了很久的一个快速简洁的博客框架。作为第一篇博客，还是按照很多 Hexo 博主的惯例，写一写 Hexo 的 Hello World。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Node.js 的安装网上有很多的教程，对于一个前端程序员来说，Node 也是一个经常会接触到的东西，这里就暂且不表。我们的安装过程从安装 Hexo 开始。</p><p>打开终端，用<code>npm install</code>安装 Hexo ：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="在本地创建一个博客站"><a href="#在本地创建一个博客站" class="headerlink" title="在本地创建一个博客站"></a>在本地创建一个博客站</h3><p>在准备创建文件夹的位置打开终端：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>至此，Hexo博客在本地安装完毕，浏览器输入<code>http://localhost:4000</code>，即可在本地运行。若无法运行，可能是<code>4000</code>端口被占用，可用 <code>hexo s -p 4001</code> 指定端口号，其中 <code>4001</code> 自定。也可修改 <code>node_modules\hexo-server\index.js</code> 中默认的 <code>port</code> 值解决。</p><h3 id="在Github上托管博客"><a href="#在Github上托管博客" class="headerlink" title="在Github上托管博客"></a>在Github上托管博客</h3><p>在 Github 上建立与你用户名对应的仓库，仓库名必须为 <code>username.github.io</code></p><p>配置 Hexo 文件夹的 <code>_config.yml</code> 文件，翻到最下面，改成：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">https://github.com/abc/abc.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意 <code>yml</code> 配置文件冒号后面有空格。</p><p>然后在终端上输入以下指令部署到 <code>Github</code> 上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>若出现报错：<code>ERROR Deployer not found：git</code> 在终端上运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><h3 id="生成新的文章"><a href="#生成新的文章" class="headerlink" title="生成新的文章"></a>生成新的文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_post</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><h3 id="更改博客主题"><a href="#更改博客主题" class="headerlink" title="更改博客主题"></a>更改博客主题</h3><p>博客主题保存在 <code>themes</code> 文件夹下，初始创建时 Hexo 为我们创建了一个默认的主题 <code>landscape</code> 。</p><p>博客主题可以在 Github 和 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes</a> 上搜寻。本站主题地址<a href="https://github.com/haojen/hexo-theme-Anisina" target="_blank" rel="noopener">点击此处</a>。</p><p>修改 <code>_config.yml</code> 中的 <code>theme</code> 来指定博客主题。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在 <code>_config.yml</code> 包括对应主题的文件夹下的 <code>_config.yml</code> 中还有很多的配置项，具体配置说明参照<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo官方配置文档</a>以及主题 Github 的说明。</p><p>其他文档参照<a href="https://hexo.io/zh-cn/api/index.html" target="_blank" rel="noopener">Hexo官方API</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实一直都有想做一个博客的想法，一方面为了记录我的技术成长，另一方面来说，如果能有更多的人关注的话，也可以交流一下，共同成长。Hexo 是一个关注了很久的一个快速简洁的博客框架。作为第一篇博客，还是按照很多 Hexo 博主的惯例，写一写 Hexo 的 Hello World
      
    
    </summary>
    
      <category term="Others" scheme="https://cttrevor.github.io/categories/Others/"/>
    
    
      <category term="Hexo" scheme="https://cttrevor.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
